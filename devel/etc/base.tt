package [% class_name %];

# ABSTRACT: Moo classes for [% context %] classes

use Moo;

use List::Util qw/ first /;
use MooX::JSON_LD 'Class';
use Ref::Util qw/ is_blessed_ref is_plain_arrayref /;
use Types::Standard qw/ Str /;

use namespace::autoclean;

our $VERSION = '[% version %]';

# RECOMMEND PREREQ: aliased
# RECOMMEND PREREQ: Ref::Util::XS
# RECOMMEND PREREQ: Type::Tiny::XS

=head1 SYNOPSIS

  use aliased 'SemanticWeb::Schema::Person' => 'Person';

  my $person = Person->new(
    name        => 'James Clerk Maxwell',
    birth_date  => '1831-06-13',
    birth_place => 'Edinburgh',
  );

  print $person->json_ld;

=head1 DESCRIPTION

This is a base class for the C<[% class_name %]> classes, which
were generated automatically from the following sources:

=over

[% FOREACH uri IN sources %]
=item L<[% uri %]>
[% END -%]

=back

=head1 ATTRIBUTES

=head2 C<id>

If this is set, it adds a C<@id> to the L</json_ld_data>.

=cut

has id => (
    is        => 'rw',
    isa       => Str,
    predicate => 1,
);

=head2 C<context>

The context defaults to "[% context %]".

=cut

around _build_context => sub { return '[% context %]' };

around json_ld_data => sub {
    my ($next, $self) = @_;

    my $data = $self->$next;

    delete $data->{$_} for grep { !defined $data->{$_} } keys %$data;

    $data->{'@id'} //= $self->id if $self->has_id;

    return $data;
};

=head1 SEE ALSO

=over

=item L<Moo>

=item L<MooX::JSON_LD>

=item L<[% context %]>

=back

=cut

1;
